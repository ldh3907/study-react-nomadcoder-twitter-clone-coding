{"version":3,"sources":["MyBase.js","img/Edit.svg","routes/Profile.js","components/AuthForm.js","img/AuthGoogle.svg","img/AuthGithub.svg","routes/Auth.js","img/Delete.svg","img/Modify.svg","img/Cancle.svg","components/Tweet.js","routes/Home.js","img/Tweet.svg","components/TweetFactory.js","img/Home.svg","img/Logo.svg","img/Profile.svg","components/Navigation.js","components/Router.js","components/Loader.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","userObj","refreshUser","useState","displayName","newDisplayName","setNewDisplayName","isClick","setIsClick","history","useHistory","getMyTweets","a","collection","where","uid","orderBy","get","docs","map","doc","data","useEffect","onSubmit","event","preventDefault","updateProfile","id","onClick","prev","src","Edit","type","onChange","value","target","placeholder","signOut","push","AuthForm","error","setError","email","setEmail","password","setPassword","newAccount","setNewAccount","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","console","log","message","className","required","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","AuthGoogle","AuthGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","delete","refFromURL","attachmentUrl","toggleEditing","update","Delete","alt","Modify","Cancle","createdAt","Home","tweets","setTweets","onSnapshot","snapshot","tweetArray","tweet","creatorId","TweetFactory","togglePost","setIsPost","setTweet","attachment","setAttachment","attachmentRef","ref","child","uuidv4","putString","response","getDownloadURL","time","Date","toLocaleDateString","add","maxLength","for","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","height","Navigation","currentSection","setCurrentSection","isPost","changeSection","document","body","style","cssText","scrollY","top","scrollTo","parseInt","Logo","to","Profile","AppRouter","isLoggedIn","exact","path","Loader","App","init","setInit","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e26ed431.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nexport default firebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\n\r\nexport const dbService = firebase.firestore();\r\n\r\nexport const storageService = firebase.storage();\r\n","export default __webpack_public_path__ + \"static/media/Edit.2fa16508.svg\";","import { authService, dbService } from \"MyBase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./Profile.css\";\r\nimport Edit from \"img/Edit.svg\";\r\n\r\nexport default ({ userObj, refreshUser }) => {\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const [isClick, setIsClick] = useState(false);\r\n  const history = useHistory();\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n  const getMyTweets = async () => {\r\n    const tweets = await dbService\r\n      .collection(\"tweets\")\r\n      .where(\"creatorId\", \"==\", userObj.uid)\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .get();\r\n    tweets.docs.map((doc) => doc.data());\r\n  };\r\n  useEffect(() => {\r\n    getMyTweets();\r\n  }, []);\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n      setIsClick(false);\r\n    }\r\n  };\r\n\r\n  const toggleRename = () => setIsClick((prev) => !prev);\r\n\r\n  return (\r\n    <>\r\n      <section id=\"profile\">\r\n        <div id=\"profile-form\">\r\n          <form id=\"profile-rename-wrap\" onSubmit={onSubmit}>\r\n            <div id=\"profile-top-wrap\">\r\n              <h1>{userObj.displayName}</h1>\r\n              <button id=\"tweet-rename-btn\" onClick={toggleRename}>\r\n                <img src={Edit} />\r\n              </button>\r\n            </div>\r\n            {isClick ? (\r\n              <>\r\n                <input\r\n                  type=\"text\"\r\n                  onChange={onChange}\r\n                  placeholder=\"변경하실 이름을 적어주세요\"\r\n                  value={newDisplayName}\r\n                />\r\n                <input type=\"submit\" value=\"이름 변경\" />\r\n              </>\r\n            ) : null}\r\n          </form>\r\n          <button id=\"profile-logOut-btn\" onClick={onLogOutClick}>\r\n            로그아웃\r\n          </button>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n","import { authService } from \"MyBase\";\r\nimport { useState } from \"react\";\r\nimport \"./AuthForm.css\";\r\n\r\nconst AuthForm = () => {\r\n  const [error, setError] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value, name },\r\n    } = event;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n  return (\r\n    <>\r\n      <form className=\"auth-wrap\" onSubmit={onSubmit}>\r\n        <div className=\"auth-input-wrap\">\r\n          <input\r\n            id=\"auth-input\"\r\n            name=\"email\"\r\n            type=\"text\"\r\n            placeholder=\"Email\"\r\n            required\r\n            value={email}\r\n            onChange={onChange}\r\n          />\r\n          <input\r\n            id=\"auth-input\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            required\r\n            value={password}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <span id=\"auth-toggle\" onClick={toggleAccount}>\r\n          {newAccount ? \"로그인\" : \"계정이 없으신가요?\"}\r\n        </span>\r\n        {error !== \"\" ? <h1 id=\"auth-error\">{error}</h1> : null}\r\n        <input\r\n          id=\"auth-submitBtn\"\r\n          type=\"submit\"\r\n          value={newAccount ? \"계정 만들기\" : \"로그인\"}\r\n        />\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","export default __webpack_public_path__ + \"static/media/AuthGoogle.bbce75f8.svg\";","export default __webpack_public_path__ + \"static/media/AuthGithub.146e30eb.svg\";","import AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance } from \"MyBase\";\r\nimport AuthGoogle from \"../img/AuthGoogle.svg\";\r\nimport AuthGithub from \"../img/AuthGithub.svg\";\r\nimport \"./Auth.css\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    const data = await authService.signInWithPopup(provider);\r\n    console.log(data);\r\n  };\r\n  return (\r\n    <section id=\"auth\">\r\n      <div className=\"auth-form\">\r\n        <h1>로그인/회원가입</h1>\r\n        <AuthForm />\r\n        <div className=\"auth-auth-wrap\">\r\n          <button id=\"auth-auth\" onClick={onSocialClick} name=\"google\">\r\n            <img id=\"auth-auth-img\" src={AuthGoogle} />\r\n            구글계정으로 로그인\r\n          </button>\r\n          <button id=\"auth-auth\" onClick={onSocialClick} name=\"github\">\r\n            <img id=\"auth-auth-img\" src={AuthGithub} />\r\n            깃허브 계정으로 로그인\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\nexport default Auth;\r\n","export default __webpack_public_path__ + \"static/media/Delete.d9483b20.svg\";","export default __webpack_public_path__ + \"static/media/Modify.1d3a1d0c.svg\";","export default __webpack_public_path__ + \"static/media/Cancle.3f65a286.svg\";","import { dbService, storageService } from \"MyBase\";\r\nimport { useState } from \"react\";\r\nimport \"./Tweet.css\";\r\nimport Delete from \"../img/Delete.svg\";\r\nimport Edit from \"../img/Edit.svg\";\r\nimport Modify from \"../img/Modify.svg\";\r\nimport Cancle from \"../img/Cancle.svg\";\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"정말 이 게시물을 삭제 하시겠습니까?\");\r\n    if (ok) {\r\n      await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n      await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n      text: newTweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewTweet(value);\r\n  };\r\n  return (\r\n    <div className=\"tweet-form\">\r\n      <div className=\"tweet-top-wrap\">\r\n        {tweetObj.name !== null ? (\r\n          <h4 id=\"tweet-name\">{tweetObj.name}</h4>\r\n        ) : (\r\n          <h4 id=\"tweet-name\">이름없음</h4>\r\n        )}\r\n        {editing\r\n          ? null\r\n          : isOwner && (\r\n              <div className=\"tweet-btn-wrap\">\r\n                <button onClick={onDeleteClick}>\r\n                  <img id=\"tweet-btn-img\" src={Delete} alt=\"삭제\" />\r\n                </button>\r\n                <button onClick={toggleEditing}>\r\n                  <img id=\"tweet-btn-img\" src={Edit} alt=\"수정\" />\r\n                </button>\r\n              </div>\r\n            )}\r\n      </div>\r\n      {editing ? (\r\n        <>\r\n          {isOwner && (\r\n            <>\r\n              <div id=\"tweet-edit-wrap\">\r\n                <form onSubmit={onSubmit}>\r\n                  <input\r\n                    id=\"tweet-text-input\"\r\n                    type=\"text\"\r\n                    placeholder=\"수정할 내용을 적어주세요\"\r\n                    value={newTweet}\r\n                    onChange={onChange}\r\n                    required\r\n                  />\r\n                  <div id=\"tweet-edit-btn-wrap\">\r\n                    <button type=\"submit\" value=\"수정\">\r\n                      <img id=\"tweet-edit-btn-img\" src={Modify} />\r\n                    </button>\r\n                    <button onClick={toggleEditing}>\r\n                      <img id=\"tweet-edit-btn-img\" src={Cancle} />\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <div className=\"tweet-content-wrap\">\r\n            <h4 id=\"tweet-text\">{tweetObj.text}</h4>\r\n            {tweetObj.attachmentUrl && (\r\n              <img src={tweetObj.attachmentUrl} className=\"tweet-img\" />\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n      <h4 id=\"tweet-date\">{tweetObj.createdAt}</h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import Tweet from \"components/Tweet\";\r\nimport { dbService } from \"MyBase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./Home.css\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    dbService.collection(\"tweets\").onSnapshot((snapshot) => {\r\n      const tweetArray = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setTweets(tweetArray);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <section id=\"home\">\r\n      <div>\r\n        {tweets.map((tweet) => (\r\n          <Tweet\r\n            key={tweet.id}\r\n            tweetObj={tweet}\r\n            isOwner={tweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","export default __webpack_public_path__ + \"static/media/Tweet.19250efd.svg\";","import { dbService, storageService } from \"MyBase\";\r\nimport { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport \"./TweetFactory.css\";\r\nimport Cancle from \"../img/Cancle.svg\";\r\nimport Tweet from \"../img/Tweet.svg\";\r\n\r\nconst TweetFactory = ({ userObj, togglePost, setIsPost }) => {\r\n  const [tweet, setTweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    let time = new Date();\r\n\r\n    const tweetObj = {\r\n      text: tweet,\r\n      createdAt: time.toLocaleDateString(),\r\n      creatorId: userObj.uid,\r\n      name: userObj.displayName,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"tweets\").add(tweetObj);\r\n    setIsPost(false);\r\n    setTweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setTweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n  const onClearAttachment = () => setAttachment(null);\r\n  return (\r\n    <div id=\"tweetFactoty-form-wrap\">\r\n      <form id=\"tweetFactory-form\" onSubmit={onSubmit}>\r\n        <div className=\"tweetFactory-top-wrap\">\r\n          <h1 id=\"tweetFactory-title\">질문을 마음껏 작성해주세요 :)</h1>\r\n          <button id=\"tweetFactory-delete-btn\" onClick={togglePost}>\r\n            <img id=\"tweetFactory-delete-btn-img\" src={Cancle} />\r\n          </button>\r\n        </div>\r\n        <input\r\n          id=\"tweetFactory-text-input\"\r\n          type=\"text\"\r\n          placeholder=\"내용을 적어주세요.\"\r\n          maxLength={120}\r\n          value={tweet}\r\n          onChange={onChange}\r\n        />\r\n        <div className=\"tweetFactory-bottom-wrap\">\r\n          <label for=\"tweetFactory-file-input\">\r\n            사진추가\r\n            <img src={Tweet} />\r\n          </label>\r\n          <input\r\n            id=\"tweetFactory-file-input\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            onChange={onFileChange}\r\n          />\r\n          {attachment && (\r\n            <div id=\"tweetFactory-preview-wrap\">\r\n              <img\r\n                src={attachment}\r\n                id=\"tweetFactory-preview-img\"\r\n                height=\"50px\"\r\n              />\r\n              <button\r\n                id=\"tweetFactory-preview-delete-btn\"\r\n                onClick={onClearAttachment}\r\n              >\r\n                <img src={Cancle} />\r\n              </button>\r\n            </div>\r\n          )}\r\n          <input id=\"tweetFactory-tweet-btn\" type=\"submit\" value=\"게시\" />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TweetFactory;\r\n","export default __webpack_public_path__ + \"static/media/Home.5bb3d522.svg\";","export default __webpack_public_path__ + \"static/media/Logo.4b19ecc2.svg\";","export default __webpack_public_path__ + \"static/media/Profile.78b64d9f.svg\";","import { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\nimport TweetFactory from \"./TweetFactory\";\r\nimport Tweet from \"../img/Tweet.svg\";\r\nimport Home from \"../img/Home.svg\";\r\nimport Logo from \"../img/Logo.svg\";\r\nimport Profile from \"../img/Profile.svg\";\r\n\r\nconst Navigation = ({ userObj }) => {\r\n  const [currentSection, setCurrentSection] = useState(true);\r\n  const [isPost, setIsPost] = useState(false);\r\n\r\n  const changeSection = (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    if (name === \"home\") {\r\n      setCurrentSection(true);\r\n    } else if (name === \"profile\") {\r\n      setCurrentSection(false);\r\n    }\r\n  };\r\n\r\n  const togglePost = () => setIsPost((prev) => !prev);\r\n\r\n  {\r\n    useEffect(() => {\r\n      if (isPost === true) {\r\n        document.body.style.cssText = `\r\n        position : fixed;\r\n        top : -${window.scrollY}px\r\n        overflow-y : scroll;\r\n        width : 100%`;\r\n        return () => {\r\n          const scrollY = document.body.style.top;\r\n          document.body.style.cssText = \"\";\r\n          window.scrollTo(0, parseInt(scrollY || \"0\", 10) * -1);\r\n        };\r\n      }\r\n    }, [isPost]);\r\n  }\r\n  return (\r\n    <>\r\n      <nav id=\"navigation\">\r\n        <img src={Logo} id=\"navigation-logo\" />\r\n        <ul>\r\n          {currentSection ? (\r\n            <li onClick={togglePost}>\r\n              <img src={Tweet} />\r\n              추가\r\n            </li>\r\n          ) : null}\r\n          <li onClick={changeSection}>\r\n            <Link name=\"home\" to=\"/\" className=\"navigation-item\">\r\n              <img src={Home} name=\"home\" />홈\r\n            </Link>\r\n          </li>\r\n          <li onClick={changeSection}>\r\n            <Link name=\"profile\" to=\"/profile\" className=\"navigation-item\">\r\n              <img src={Profile} name=\"profile\" />\r\n              {userObj.displayName}님의 프로필\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      {isPost ? (\r\n        currentSection ? (\r\n          <TweetFactory\r\n            setIsPost={setIsPost}\r\n            userObj={userObj}\r\n            togglePost={togglePost}\r\n          />\r\n        ) : null\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\nexport default Navigation;\r\n","import { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Profile from \"routes/Profile\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n          </>\r\n        ) : (\r\n          <Route exact path=\"/\">\r\n            <Auth />\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import \"./Loader.css\";\r\n\r\nconst Loader = () => (\r\n  <section id=\"loader\">\r\n    <div id=\"loader-loader\" />\r\n    <h1 id=\"loader-text\">로딩중</h1>\r\n  </section>\r\n);\r\n\r\nexport default Loader;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport AppRouter from \"./Router\";\nimport { authService } from \"../MyBase\";\nimport Loader from \"./Loader\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n          refreshUser={refreshUser}\n        />\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport firebase from \"./MyBase\";\nconsole.log(firebase);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}